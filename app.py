import os
import asyncio
import sys
import io
from dotenv import load_dotenv
from telethon import TelegramClient, events
from telethon.sessions import StringSession
from flask import Flask, request, jsonify
import logging
import threading
import time
import requests

logging.basicConfig(level=logging.INFO)
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

load_dotenv()

api_id = int(os.getenv('API_ID'))
api_hash = os.getenv('API_HASH')
group_id = int(os.getenv('GROUP_ID'))
bot_token = os.getenv('TELEGRAM_TOKEN')
bot_target = 'DTEKOdeskiElektromerezhiBot'
string_session = os.getenv('STRING_SESSION')
monitoring_password = os.getenv('MONITORING_PASSWORD')

app = Flask(__name__)
message_queue = asyncio.Queue()
last_request_time = 0
is_processing = False  # –§–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
monitoring_enabled = False  # –§–ª–∞–≥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

loop = asyncio.get_event_loop()

async def send_message(client, message):
    try:
        sent_message = await client.send_message(bot_target, message)
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ '{message}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –±–æ—Ç!")
        await asyncio.sleep(2)
        await client.delete_messages(bot_target, sent_message.id)
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ '{message}' —Å ID {sent_message.id} —É–¥–∞–ª–µ–Ω–æ.")
        return sent_message.id
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

async def wait_for_bot_response(client):
    logging.info("–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞...")
    while True:
        message = await client.get_messages(bot_target, limit=1)
        if message and message[0].text:
            logging.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞: {message[0].text}")
            return message[0]
        await asyncio.sleep(1)

def send_message_to_group(token, chat_id, text):
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    payload = {
        'chat_id': chat_id,
        'text': text
    }
    response = requests.post(url, json=payload)
    return response.json()

last_dtek_request_time = 0  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ /dtek

async def handle_dtek_command(client, event):
    global is_processing, last_dtek_request_time

    current_time = time.time()

    if is_processing:
        logging.info("–ó–∞–ø—Ä–æ—Å –∫ /dtek –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.")
        await event.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        return

    if current_time - last_dtek_request_time < 30:
        logging.info("–ó–∞–ø—Ä–æ—Å –∫ /dtek –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø–æ—Å—Ç—É–ø–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ.")
        await event.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        return

    last_dtek_request_time = current_time  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    is_processing = True
    logging.info("–ö–æ–º–∞–Ω–¥–∞ '/dtek' –ø–æ–ª—É—á–µ–Ω–∞.")
    
    await message_queue.put("‚ò∞ –ú–µ–Ω—é")
    attempts = 0

    try:
        while True:
            response_message = await wait_for_bot_response(client)
            response_text = response_message.text
            logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞: {response_text}")

            # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
            await asyncio.sleep(2)

            if "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µüëá" in response_text:
                await client.delete_messages(bot_target, response_message.id)
                logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ '–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µüëá' —É–¥–∞–ª–µ–Ω–æ.")

                await message_queue.put("üí°–ú–æ–∂–ª–∏–≤—ñ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è")

                while True:
                    response_message = await wait_for_bot_response(client)
                    response_text = response_message.text
                    logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞: {response_text}")

                    # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
                    await asyncio.sleep(2)

                    if "–ü–µ—Ç—Ä–∞ –ù—ñ—â–∏–Ω—Å—å–∫–æ–≥–æ" in response_text:
                        send_message_to_group(bot_token, group_id, response_text)
                        logging.info("–û—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞ —Å '–ü–µ—Ç—Ä–∞ –ù—ñ—â–∏–Ω—Å—å–∫–æ–≥–æ' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É.")
                        
                        await client.delete_messages(bot_target, response_message.id)
                        logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞ —Å ID {response_message.id} —É–¥–∞–ª—ë–Ω.")
                        break
                    
                    elif "–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Å–≤—ñ—Ç–ª–∞" in response_text:
                        send_message_to_group(bot_token, group_id, response_text)
                        logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ '–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Å–≤—ñ—Ç–ª–∞' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É.")
                        
                        await client.delete_messages(bot_target, response_message.id)
                        logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞ —Å ID {response_message.id} —É–¥–∞–ª—ë–Ω.")
                        break
                    
                    else:
                        attempts += 1
                        logging.info("–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ —Ñ—Ä–∞–∑—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞.")
                        if attempts >= 5:
                            logging.info("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
                            break
                        await asyncio.sleep(2)
                break
            else:
                attempts += 1
                logging.info("–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—É—é —Ñ—Ä–∞–∑—É, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞.")
                if attempts >= 5:
                    logging.info("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
                    break
                await asyncio.sleep(2)

    finally:
        is_processing = False

async def process_event(client):
    global is_processing, last_dtek_request_time, monitoring_enabled

    @client.on(events.NewMessage(chats=group_id, pattern='/dtek'))
    async def handler(event):
        if monitoring_enabled:
            await handle_dtek_command(client, event)
        else:
            logging.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω, –∫–æ–º–∞–Ω–¥–∞ /dtek –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞.")
            await event.delete()

    @client.on(events.NewMessage(chats=group_id))
    async def monitor_handler(event):
        if monitoring_enabled:
            message_text = event.message.message.lower()
            logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")

            if "—Å–≤–µ—Ç –≤—ã–∫–ª—é—á–∏–ª–∏" in message_text:
                logging.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '—Å–≤–µ—Ç –≤—ã–∫–ª—é—á–∏–ª–∏'.")
                await handle_dtek_command(client, event)
            else:
                logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–π —Ñ—Ä–∞–∑—ã.")
        else:
            logging.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.")

    @client.on(events.NewMessage(chats=group_id, pattern='/startstop'))
    async def startstop_handler(event):
        global monitoring_enabled
        message_text = event.message.message.lower()
        if monitoring_password and message_text.startswith(f'/startstop {monitoring_password}'):
            monitoring_enabled = not monitoring_enabled
            status = "–≤–∫–ª—é—á–µ–Ω" if monitoring_enabled else "–æ—Ç–∫–ª—é—á–µ–Ω"
            await event.respond(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π {status}.")
            logging.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π {status}.")
        else:
            await event.respond("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /startstop.")
            logging.info("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º.")

async def process_queue(client):
    while True:
        message = await message_queue.get()
        await send_message(client, message)
        message_queue.task_done()

async def main():
    async with TelegramClient(StringSession(string_session), api_id, api_hash) as client:
        asyncio.create_task(process_queue(client))
        await process_event(client)
        logging.info("–°–ª—É—à–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ...")
        await client.run_until_disconnected()

def start_telegram_client():
    asyncio.set_event_loop(loop)
    loop.run_until_complete(main())

@app.route('/dtek', methods=['POST'])
def ping():
    global last_request_time
    current_time = time.time()

    if current_time - last_request_time < 60:
        logging.info("–ó–∞–ø—Ä–æ—Å –∫ /dtek –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø–æ—Å—Ç—É–ø–∞–µ—Ç —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ.")
        return jsonify({"status": "ignored", "message": "–ó–∞–ø—Ä–æ—Å –∫ /dtek –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø–æ—Å—Ç—É–ø–∞–µ—Ç —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ."}), 429

    last_request_time = current_time

    # –ü–æ–º–µ—â–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π
    loop.create_task(message_queue.put("üí°–ú–æ–∂–ª–∏–≤—ñ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è"))

    logging.info("–ö–æ–º–∞–Ω–¥–∞ '/dtek' –ø–æ–ª—É—á–µ–Ω–∞.")
    return jsonify({"status": "received", "message": "–ö–æ–º–∞–Ω–¥–∞ '/dtek' —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞."}), 200

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telegram –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    telegram_thread = threading.Thread(target=start_telegram_client)
    telegram_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
    app.run(host='0.0.0.0', port=int(os.getenv("PORT", 5000)))
