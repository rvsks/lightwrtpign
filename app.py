import os
import asyncio
import sys
import io
from dotenv import load_dotenv
from telethon import TelegramClient, events
from flask import Flask, request, jsonify
import logging
from threading import Thread
from time import time

logging.basicConfig(level=logging.INFO)
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

load_dotenv()

api_id = int(os.getenv('API_ID'))
api_hash = os.getenv('API_HASH')
phone = os.getenv('PHONE_NUMBER')
group_id = int(os.getenv('GROUP_ID'))
bot_target = 'DTEKOdeskiElektromerezhiBot'

app = Flask(__name__)
message_queue = asyncio.Queue()
last_dtek_time = 0  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ '/dtek'

async def send_message(client, message):
    try:
        sent_message = await client.send_message(bot_target, message)
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ '{message}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –±–æ—Ç!")
        await asyncio.sleep(2)  # –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã
        return sent_message.id
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

async def wait_for_bot_response(client):
    while True:
        message = await client.get_messages(bot_target, limit=1)
        if message and message[0].text:
            return message[0]
        await asyncio.sleep(1)

async def process_event(client):
    global last_dtek_time
    @client.on(events.NewMessage(chats=group_id, pattern='/dtek'))
    async def handler(event):
        current_time = time()
        if current_time - last_dtek_time < 60:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ 60 —Å–µ–∫—É–Ω–¥
            logging.info("–ö–æ–º–∞–Ω–¥–∞ '/dtek' –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞ (—á–∞—Å—Ç–æ—Ç–∞ –±–æ–ª—å—à–µ 1 –º–∏–Ω—É—Ç—ã).")
            return
        
        last_dtek_time = current_time  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        logging.info("–ö–æ–º–∞–Ω–¥–∞ '/dtek' –ø–æ–ª—É—á–µ–Ω–∞.")
        
        await message_queue.put("‚ò∞ –ú–µ–Ω—é")

        while True:
            response_message = await wait_for_bot_response(client)
            response_text = response_message.text
            logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞: {response_text}")

            if "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µüëá" in response_text:
                await client.delete_messages(bot_target, response_message.id)
                logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ '–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µüëá' —É–¥–∞–ª–µ–Ω–æ.")

                await message_queue.put("üí°–ú–æ–∂–ª–∏–≤—ñ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è")

                while True:
                    response_message = await wait_for_bot_response(client)
                    response_text = response_message.text
                    logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞: {response_text}")

                    if "–ü–µ—Ç—Ä–∞ –ù—ñ—â–∏–Ω—Å—å–∫–æ–≥–æ" in response_text:
                        await client.send_message(group_id, response_text)
                        logging.info("–û—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞ —Å '–ü–µ—Ç—Ä–∞ –ù—ñ—â–∏–Ω—Å—å–∫–æ–≥–æ' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É.")
                        await client.delete_messages(bot_target, response_message.id)
                        logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞ —Å ID {response_message.id} —É–¥–∞–ª—ë–Ω.")
                        break
                    
                    elif "–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Å–≤—ñ—Ç–ª–∞" in response_text:
                        await client.send_message(group_id, response_text)
                        logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ '–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Å–≤—ñ—Ç–ª–∞' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É.")
                        await client.delete_messages(bot_target, response_message.id)
                        logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞ —Å ID {response_message.id} —É–¥–∞–ª—ë–Ω.")
                        break
                    
                    else:
                        logging.info("–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ —Ñ—Ä–∞–∑—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞.")
                break
            else:
                logging.info("–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—É—é —Ñ—Ä–∞–∑—É, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞.")

async def process_queue(client):
    while True:
        message = await message_queue.get()
        await send_message(client, message)
        message_queue.task_done()

async def main():
    async with TelegramClient('session_name', api_id, api_hash) as client:
        asyncio.create_task(process_queue(client))
        await process_event(client)
        logging.info("–°–ª—É—à–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ...")
        await client.run_until_disconnected()

@app.route('/dtek', methods=['POST'])
def ping():
    global last_dtek_time
    current_time = time()
    if current_time - last_dtek_time < 60:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ 60 —Å–µ–∫—É–Ω–¥
        logging.info("–ö–æ–º–∞–Ω–¥–∞ '/dtek' –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞ (—á–∞—Å—Ç–æ—Ç–∞ –±–æ–ª—å—à–µ 1 –º–∏–Ω—É—Ç—ã).")
        return jsonify({"status": "ignored", "message": "–ö–æ–º–∞–Ω–¥–∞ '/dtek' –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞."}), 429  # 429 Too Many Requests
    
    last_dtek_time = current_time  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    thread = Thread(target=lambda: asyncio.run(main()))
    thread.start()

    logging.info("–ö–æ–º–∞–Ω–¥–∞ '/dtek' –ø–æ–ª—É—á–µ–Ω–∞.")
    return jsonify({"status": "received", "message": "–ö–æ–º–∞–Ω–¥–∞ '/dtek' —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞."}), 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.getenv("PORT", 5000)))
