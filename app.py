import os
import asyncio
import sys
import io
from dotenv import load_dotenv
from telethon import TelegramClient, events
from flask import Flask, request, jsonify

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

api_id = int(os.getenv('API_ID'))
api_hash = os.getenv('API_HASH')
phone = os.getenv('PHONE_NUMBER')

group_id = -1002180123975  # ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã
bot_target = 'DTEKOdeskiElektromerezhiBot'  # –ò–º—è –±–æ—Ç–∞

app = Flask(__name__)

async def send_message(client, message):
    try:
        sent_message = await client.send_message(bot_target, message)
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ '{message}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –±–æ—Ç!")
        await asyncio.sleep(2)  # –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã
        return sent_message.id
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

async def wait_for_bot_response(client):
    while True:
        message = await client.get_messages(bot_target, limit=1)
        if message and message[0].text:
            return message[0]
        await asyncio.sleep(1)  # –û–∂–∏–¥–∞–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥–∞

@app.route('/ping', methods=['POST'])
def ping():
    asyncio.run(main())
    return jsonify({"status": "received"}), 200

async def main():
    async with TelegramClient('session_name', api_id, api_hash) as client:
        @client.on(events.NewMessage(chats=group_id, pattern='/dtek'))
        async def handler(event):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "‚ò∞ –ú–µ–Ω—é"
            sent_menu_message_id = await send_message(client, "‚ò∞ –ú–µ–Ω—é")
            if sent_menu_message_id is not None:
                await client.delete_messages(bot_target, sent_menu_message_id)
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ '‚ò∞ –ú–µ–Ω—é' —Å ID {sent_menu_message_id} —É–¥–∞–ª–µ–Ω–æ.")

            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞
            while True:
                response_message = await wait_for_bot_response(client)
                response_text = response_message.text
                print(f"–û—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞: {response_text}")

                if "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µüëá" in response_text:
                    await client.delete_messages(bot_target, response_message.id)
                    print("–°–æ–æ–±—â–µ–Ω–∏–µ '–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µüëá' —É–¥–∞–ª–µ–Ω–æ.")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "üí°–ú–æ–∂–ª–∏–≤—ñ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è"
                    sent_vydkl_message_id = await send_message(client, "üí°–ú–æ–∂–ª–∏–≤—ñ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è")
                    if sent_vydkl_message_id is not None:
                        await client.delete_messages(bot_target, sent_vydkl_message_id)
                        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ 'üí°–ú–æ–∂–ª–∏–≤—ñ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è' —Å ID {sent_vydkl_message_id} —É–¥–∞–ª–µ–Ω–æ.")

                    # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ "üí°–ú–æ–∂–ª–∏–≤—ñ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è"
                    while True:
                        response_message = await wait_for_bot_response(client)
                        response_text = response_message.text
                        print(f"–û—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞: {response_text}")

                        if "–ü–µ—Ç—Ä–∞ –ù—ñ—â–∏–Ω—Å—å–∫–æ–≥–æ" in response_text:
                            await client.send_message(group_id, response_text)
                            print("–û—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞ —Å '–ü–µ—Ç—Ä–∞ –ù—ñ—â–∏–Ω—Å—å–∫–æ–≥–æ' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É.")
                            await client.delete_messages(bot_target, response_message.id)
                            print(f"–û—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞ —Å ID {response_message.id} —É–¥–∞–ª—ë–Ω.")
                            break
                        
                        elif "–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Å–≤—ñ—Ç–ª–∞" in response_text:
                            await client.send_message(group_id, response_text)
                            print("–°–æ–æ–±—â–µ–Ω–∏–µ '–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Å–≤—ñ—Ç–ª–∞' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É.")
                            await client.delete_messages(bot_target, response_message.id)
                            print(f"–û—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞ —Å ID {response_message.id} —É–¥–∞–ª—ë–Ω.")
                            break
                        
                        else:
                            print("–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ —Ñ—Ä–∞–∑—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞.")
                    break
                else:
                    print("–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—É—é —Ñ—Ä–∞–∑—É, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞.")

        print("–°–ª—É—à–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ...")
        await client.run_until_disconnected()

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.getenv("PORT", 5000)))
